{
    "1": {
        "data": "USS_DA_LAD { +4 ifs +1 statement} insert before : __ASTREE_comment(( 0:27, 0:53, arithmetic_overflow, \"ITK: no overflow, division-by-zero is guaranteed\", false)); /*USS_DA_LAD.c:2945.31-84*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2945,
        "alarm_start_col": 31,
        "alarm_end_line": 2945,
        "alarm_end_col": 84,
        "alarm_comment": " \"ITK: no overflow",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "USS_GC_s_EPSStgTqVAbs_measure / SUSS_DA_LAD106_Switch;\n"
    },
    "2": {
        "data": "USS_DA_LAD { +3 ifs +4 statements} insert before : __ASTREE_comment(( 0:50, 1:33, arithmetic_overflow, \"ITK: the second order filter from chassis library is already validated \", false)); /*USS_DA_LAD.c:2828.54-2829.33*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2828,
        "alarm_start_col": 54,
        "alarm_end_line": 2829,
        "alarm_end_col": 33,
        "alarm_comment": " \"ITK: the second order filter from chassis library is already validated \"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "(SUSS_DA_LAD119_Product5 *\n     X_SUSS_DA_LAD111_UnitDelay2)"
    },
    "3": {
        "data": "USS_DA_LAD { +3 ifs +4 statements} insert before : __ASTREE_comment(( 1:36, 0:55, arithmetic_overflow, \"ITK: the second order filter from chassis library is already validated \", false)); /*USS_DA_LAD.c:2829.36-91*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2829,
        "alarm_start_col": 36,
        "alarm_end_line": 2829,
        "alarm_end_col": 91,
        "alarm_comment": " \"ITK: the second order filter from chassis library is already validated \"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "(SUSS_DA_LAD119_Product6 * X_SUSS_DA_LAD111_UnitDelay1);\n"
    },
    "4": {
        "data": "USS_DA_LAD { +3 ifs +4 statements} insert before : __ASTREE_comment(( 0:21, 1:91, arithmetic_overflow, \"ITK: the second order filter from chassis library is already validated \", false)); /*USS_DA_LAD.c:2828.25-2829.91*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2828,
        "alarm_start_col": 25,
        "alarm_end_line": 2829,
        "alarm_end_col": 91,
        "alarm_comment": " \"ITK: the second order filter from chassis library is already validated \"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "USS_GC_s_EPSStgTqV_measure - (SUSS_DA_LAD119_Product5 *\n     X_SUSS_DA_LAD111_UnitDelay2) - (SUSS_DA_LAD119_Product6 * X_SUSS_DA_LAD111_UnitDelay1)"
    },
    "5": {
        "data": "USS_DA_LAD { +3 ifs +5 statements} insert before : __ASTREE_comment(( 1:5, 0:55, arithmetic_overflow, \"ITK: fabsf function is already validated\", false)); /*USS_DA_LAD.c:2848.5-60*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2848,
        "alarm_start_col": 5,
        "alarm_end_line": 2848,
        "alarm_end_col": 60,
        "alarm_comment": " \"ITK: fabsf function is already validated\"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "(SUSS_DA_LAD119_Product4 * X_SUSS_DA_LAD111_UnitDelay1) + (SUSS_DA_LAD119_Product2 *\n"
    },
    "6": {
        "data": "USS_DA_LAD { +3 ifs +5 statements} insert before : __ASTREE_comment(( 0:38, 1:60, arithmetic_overflow, \"ITK: fabsf function is already validated\", false)); /*USS_DA_LAD.c:2847.42-2848.60*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2847,
        "alarm_start_col": 42,
        "alarm_end_line": 2848,
        "alarm_end_col": 60,
        "alarm_comment": " \"ITK: fabsf function is already validated\"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "(SUSS_DA_LAD119_Product2 * SUSS_DA_LAD111_Sum) +\n     (SUSS_DA_LAD119_Product4 * X_SUSS_DA_LAD111_UnitDelay1)"
    },
    "7": {
        "data": "USS_DA_LAD { +3 ifs +5 statements} insert before : __ASTREE_comment(( 0:38, 2:33, arithmetic_overflow, \"ITK: fabsf function is already validated\", false)); /*USS_DA_LAD.c:2847.42-2849.33*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2847,
        "alarm_start_col": 42,
        "alarm_end_line": 2849,
        "alarm_end_col": 33,
        "alarm_comment": " \"ITK: fabsf function is already validated\"",
        "alarm_type": " arithmetic_overflow",
        "alarm_classification": " false",
        "source": "(SUSS_DA_LAD119_Product2 * SUSS_DA_LAD111_Sum) +\n     (SUSS_DA_LAD119_Product4 * X_SUSS_DA_LAD111_UnitDelay1) + (SUSS_DA_LAD119_Product2 *\n     X_SUSS_DA_LAD111_UnitDelay2)"
    },
    "8": {
        "data": "Tab1DIntp2I1T438_USS_DA_LAD  insert before : __ASTREE_comment(( 0:0, 11:1, check_unreachable_code, \"ITK: library functions have been validated separately and therefore substituted here by stubs functions\", false)); /*USS_DA_LAD.c:2441.0-2452.1*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2441,
        "alarm_start_col": 0,
        "alarm_end_line": 2452,
        "alarm_end_col": 1,
        "alarm_comment": " \"ITK: library functions have been validated separately and therefore substituted here by stubs functions\"",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " false",
        "source": "float32 Tab1DIntp2I1T438_USS_DA_LAD(const float32 * z_table, float32 irx, float32 fractionX)\n{\n    /* SLLocal: Default storage class for local variables | Width: 32 */\n    float32 Aux_F32;\n\n    z_table += ((sint32) irx);\n    Aux_F32 = *(z_table++);\n    if (fractionX != 0.F) {\n        Aux_F32 += ((*z_table - Aux_F32) * fractionX);\n    }\n    return Aux_F32;\n}"
    },
    "9": {
        "data": "TabIdxS0T6_USS_DA_LAD  insert before : __ASTREE_comment(( 0:0, 25:1, check_unreachable_code, \"ITK: library functions have been validated separately and therefore substituted here by stubs functions\", false)); /*USS_DA_LAD.c:2530.0-2555.1*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2530,
        "alarm_start_col": 0,
        "alarm_end_line": 2555,
        "alarm_end_col": 1,
        "alarm_comment": " \"ITK: library functions have been validated separately and therefore substituted here by stubs functions\"",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " false",
        "source": "void TabIdxS0T6_USS_DA_LAD(const float32 * x_table, uint8 N, float32 x, uint8 * irx)\n{\n    /* SLLocal: Default storage class for local variables | Width: 8 */\n    uint8 Aux_U8;\n\n    /* Saturation. */\n    if (x <= *x_table) {\n        *irx = 0;\n    }\n    else {\n        if (x >= x_table[N - 1]) {\n            *irx = N - 1;\n        }\n        else {\n            Aux_U8 = 0;\n\n            /* Linear search, start low. */\n            x_table++;\n            while (x >= *(x_table++)) {\n                Aux_U8++;\n            }\n            x_table -= 2;\n            *irx = Aux_U8;\n        }\n    }\n}"
    },
    "10": {
        "data": "USS_DA_LAD { +2 if {else: +1 statement}} insert before : __ASTREE_comment(( 0:0, 0:29, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2667.8-37*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2667,
        "alarm_start_col": 8,
        "alarm_end_line": 2667,
        "alarm_end_col": 37,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "float32 SUSS_DA_LAD86_Negate;\n"
    },
    "11": {
        "data": "USS_DA_LAD { +2 if {else: +2 statements}} insert before : __ASTREE_comment(( 0:0, 0:46, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2671.8-54*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2671,
        "alarm_start_col": 8,
        "alarm_end_line": 2671,
        "alarm_end_col": 54,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "SUSS_DA_LAD86_Negate = USS_c_ValDivLim * -1.F;\n"
    },
    "12": {
        "data": "USS_DA_LAD { +2 if {else: +1 if}} insert before : __ASTREE_comment(( 0:0, 13:9, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2677.8-2690.9*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2677,
        "alarm_start_col": 8,
        "alarm_end_line": 2690,
        "alarm_end_col": 9,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "if (USS_LAD_s_StgTqTh_measure < SUSS_DA_LAD86_Negate) {\n            /* # combined # Switch: DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteer\n                ingActivityTorqueBased/ProtectedDivision/Switch\n                # combined # DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteeringActi\n                vityTorqueBased/ThresholdCalculation/MultiMeasure1/MeasSubsys/Data Type Conversion\n                # combined # DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteeringActi\n                vityTorqueBased/ThresholdCalculation/MultiMeasure1/Signal Conversion */\n            SUSS_DA_LAD86_Switch = USS_LAD_s_StgTqTh_measure;\n        }\n        else {\n            /* # combined # Switch: DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteer\n                ingActivityTorqueBased/ProtectedDivision/Switch */\n            SUSS_DA_LAD86_Switch = SUSS_DA_LAD86_Negate;\n        }"
    },
    "13": {
        "data": "USS_DA_LAD { +4 if {else: +1 statement}} insert before : __ASTREE_comment(( 0:0, 0:30, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2908.8-38*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2908,
        "alarm_start_col": 8,
        "alarm_end_line": 2908,
        "alarm_end_col": 38,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "float32 SUSS_DA_LAD106_Negate;\n"
    },
    "14": {
        "data": "USS_DA_LAD { +4 if {else: +2 statements}} insert before : __ASTREE_comment(( 0:0, 0:47, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2912.8-55*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2912,
        "alarm_start_col": 8,
        "alarm_end_line": 2912,
        "alarm_end_col": 55,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "SUSS_DA_LAD106_Negate = USS_c_ValDivLim * -1.F;\n"
    },
    "15": {
        "data": "USS_DA_LAD { +4 if {else: +1 if}} insert before : __ASTREE_comment(( 0:0, 14:9, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:2918.8-2932.9*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2918,
        "alarm_start_col": 8,
        "alarm_end_line": 2932,
        "alarm_end_col": 9,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "if (USS_LAD_s_StgTqVTh_measure < SUSS_DA_LAD106_Negate) {\n            /* # combined # Switch: DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteer\n                ingActivityTorqueVelocityBased/ProtectedDivision/Switch\n                # combined # DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteeringActi\n                vityTorqueVelocityBased/ThresholdCalculation/MultiMeasure1/MeasSubsys/Data Type Conv\n                ersion\n                # combined # DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteeringActi\n                vityTorqueVelocityBased/ThresholdCalculation/MultiMeasure1/Signal Conversion */\n            SUSS_DA_LAD106_Switch = USS_LAD_s_StgTqVTh_measure;\n        }\n        else {\n            /* # combined # Switch: DriverActivityLateralDA_LAD/LateralSteeringActivity/LateralSteer\n                ingActivityTorqueVelocityBased/ProtectedDivision/Switch */\n            SUSS_DA_LAD106_Switch = SUSS_DA_LAD106_Negate;\n        }"
    },
    "16": {
        "data": "USS_DA_LAD { +8 if {else: +1 statement}} insert before : __ASTREE_comment(( 0:0, 0:61, check_unreachable_code, \"ITK: one case of the protected Division is not used, limited signal is never bigger than the upper bound \", true_no_defect)); /*USS_DA_LAD.c:3072.8-69*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 3072,
        "alarm_start_col": 8,
        "alarm_end_line": 3072,
        "alarm_end_col": 69,
        "alarm_comment": " \"ITK: one case of the protected Division is not used",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " true_no_defect",
        "source": "USS_LAD_s_LatInAcvTi_s_measure = USS_LAD_c_LatInAcvTiUpprLim;\n"
    },
    "17": {
        "data": "Tab1DS0I2T3126_USS_DA_LAD  insert before : __ASTREE_comment(( 0:0, 26:1, check_unreachable_code, \"ITK: lookup function is stubbed as tested but still in use actually\", false)); /*USS_DA_LAD.c:2479.0-2505.1*/",
        "alarm_file_pos": "USS_DA_LAD.c",
        "alarm_start_line": 2479,
        "alarm_start_col": 0,
        "alarm_end_line": 2505,
        "alarm_end_col": 1,
        "alarm_comment": " \"ITK: lookup function is stubbed as tested but still in use actually\"",
        "alarm_type": " check_unreachable_code",
        "alarm_classification": " false",
        "source": "float32 Tab1DS0I2T3126_USS_DA_LAD(const MAP_Tab1DS0I2T3126_USS_DA_LAD * map, float32 x)\n{\n    /* SLLutLocalConst: Default storage class for local variables | Width: N.A. */\n    const float32 * x_table; /* Scaling may differ through function reuse. */\n    const float32 * z_table; /* Scaling may differ through function reuse. */\n\n    x_table = map->x_table;\n    z_table = map->z_table;\n    if (x <= *x_table) {\n        /* Saturation. */\n        return z_table[0];\n    }\n    if (x >= x_table[(uint8) (map->Nx - 1)]) {\n        return z_table[(uint8) (map->Nx - 1)];\n    }\n\n    /* Linear search, start low. */\n    x_table++;\n    while (x > *(x_table++)) {\n        z_table++;\n    }\n    x_table -= 2;\n\n    /* Interpolation. */\n    return (z_table[0] + (((z_table[1] - z_table[0]) * (x - x_table[0])) / (x_table[1] -\n     x_table[0])));\n}"
    }
}